name: Deploy Sample Application to EKS

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: 'Terraform Init'
      run: terraform init

    - name: 'Terraform Format'
      run: terraform fmt

    - name: 'Terraform Validate'
      run: terraform validate

    - name: 'Terraform Plan'
      run: terraform plan -out=tfplan

    - name: 'Terraform Apply'
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve tfplan

    - name: Login to ECR
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 264852106485.dkr.ecr.us-east-1.amazonaws.com

    - name: Build and Push Docker Image
      run: |
        docker build -t ecr-repo:latest .
        docker tag ecr-repo:latest 264852106485.dkr.ecr.us-east-1.amazonaws.com/ecr-repo:latest
        docker push 264852106485.dkr.ecr.us-east-1.amazonaws.com/ecr-repo:latest

    - name: Setup kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name githubcluster --region ${{ vars.AWS_REGION }}

    - name: Deploy to EKS
      run: |
        kubectl apply -f eks-deployment.yml --validate=false
        kubectl apply -f service.yml



# # name: Terraform CI/CD

# # on:
# #   push:
# #     branches:
# #       - main
# #   pull_request:
# #     branches:
# #       - main

# # jobs:
# #   terraform:
# #     name: 'Terraform Lint, Security Check, and Deploy'
# #     runs-on: ubuntu-latest

# #     env:
# #       AWS_REGION: 'us-east-1'
# #       TF_VERSION: '1.4.0'
# #       TFLINT_VERSION: '0.46.1'  # Updated to a more recent version
# #       TFSEC_VERSION: '1.28.1'   # Updated to a more recent version

# #     steps:
# #     - name: 'Checkout GitHub repository'
# #       uses: actions/checkout@v2

# #     - name: 'Configure AWS credentials'
# #       uses: aws-actions/configure-aws-credentials@v1
# #       with:
# #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
# #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# #         aws-region: ${{ env.AWS_REGION }}

# #     - name: 'Set up Terraform'
# #       uses: hashicorp/setup-terraform@v1
# #       with:
# #         terraform_version: ${{ env.TF_VERSION }}

# #     - name: 'Install TFLint'
# #       run: |
# #         curl -sLo tflint.zip https://github.com/terraform-linters/tflint/releases/download/v${{ env.TFLINT_VERSION }}/tflint_linux_amd64.zip
# #         unzip tflint.zip -d /usr/local/bin/
# #         tflint --version

# #     - name: 'Install tfsec'
# #       run: |
# #         curl -sLo tfsec https://github.com/aquasecurity/tfsec/releases/download/v${{ env.TFSEC_VERSION }}/tfsec-linux-amd64
# #         chmod +x tfsec
# #         mv tfsec /usr/local/bin/
# #         tfsec --version

# #     - name: 'Terraform Init'
# #       run: terraform init

# #     - name: 'Terraform Format'
# #       run: terraform fmt

# #     - name: 'Terraform Validate'
# #       run: terraform validate

# #     - name: 'TFLint'
# #       run: |
# #         tflint --init
# #         tflint

# #     - name: 'tfsec'
# #       run: tfsec .

# #     - name: 'Terraform Plan'
# #       run: terraform plan -out=tfplan

# #     - name: 'Terraform Apply'
# #       if: github.ref == 'refs/heads/main'
# #       run: terraform apply -auto-approve tfplan


# name: Node js app deploy to EKS
# on:
#   push:
#     branches: [ "main" ]

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Install kubectl
#       uses: azure/setup-kubectl@v2.0
#       with:
#         version: 'v1.24.0' # default is latest stable
#       id: install

#     - name: Configure AWS Credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-east-2

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Build, tag, and push docker image to Amazon ECR
#       env:
#         REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         REPOSITORY: EKSTestingimage
#         IMAGE_TAG: latest
#       run: |
#         docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
#         docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

#     - name: Update kube config
#       run: aws eks update-kubeconfig --name EKSTesting
    
#     - name: Deploy to EKS
#       run: |
#         kubectl apply -f deployment.yaml
#         kubectl apply -f service.yaml